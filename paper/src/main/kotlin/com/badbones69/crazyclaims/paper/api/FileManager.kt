package com.badbones69.crazyclaims.paper.api

/*
@Singleton
class FileManager {
    @Inject
    private val plugin: CrazyClaims? = null

    @Inject
    private val methods: Methods? = null

    @Inject
    private val configFile: ConfigFile? = null
    private val fileConfigurations: HashMap<String?, FileConfiguration> = HashMap<String?, FileConfiguration>()
    private val files = HashMap<String, File?>()
    private var logChanges = false

    // Custom file generation!
    private val homeFolders = ArrayList<String>()
    private val customFiles = ArrayList<CustomFile>()
    private val jarHomeFolders = HashMap<String, String?>()
    private val autoGeneratedFiles = HashMap<String, String>()
    fun setup(): FileManager {
        if (!plugin.getDataFolder().exists()) plugin.getDataFolder().mkdirs()
        if (homeFolders.size > 0) {
            if (logChanges) plugin.getLogger().warning("Loading custom files...")
            for (folder in homeFolders) {
                val homeFile: File = File(plugin.getDataFolder(), "/$folder")
                if (homeFile.exists()) {
                    val list = homeFile.list()
                    if (list != null) {
                        for (name in list) {
                            if (name.endsWith(".yml")) {
                                val file = CustomFile(name, folder, logChanges, plugin)
                                if (file.exists()) {
                                    customFiles.add(file)
                                    update(file.fileName)
                                    if (logChanges) plugin.getLogger().info("Loaded new custom file: $homeFile/$name.")
                                }
                            }
                        }
                    }
                    return this
                }
                homeFile.mkdir()
                if (logChanges) plugin.getLogger().info("The folder $folder/ was not found so it was created.")
                for (fileName in autoGeneratedFiles.keys) {
                    if (autoGeneratedFiles[fileName].equals(folder, ignoreCase = true)) {
                        folder = autoGeneratedFiles[fileName]
                        try {
                            val serverFile: File = File(plugin.getDataFolder(), "$folder/$fileName")
                            val jarFile: InputStream = plugin.javaClass.getResourceAsStream(
                                jarHomeFolders.getOrDefault(
                                    fileName,
                                    folder
                                ) + "/" + fileName
                            )
                            methods.copyFile(jarFile, serverFile)
                            if (fileName.lowercase(Locale.getDefault()).endsWith(".yml")) {
                                customFiles.add(CustomFile(fileName, folder, logChanges, plugin))
                            }
                            if (logChanges) plugin.getLogger().info("Created new default file: $folder/$fileName.")
                        } catch (e: Exception) {
                            plugin.getLogger().warning("Could not save $fileName!")
                            for (stack in e.stackTrace) {
                                plugin.getLogger().severe(stack.toString())
                            }
                        }
                    }
                }
            }
        }
        return this
    }

    // Sets whether its loggable.
    fun isLogging(toggle: Boolean) {
        logChanges = toggle
    }

    // Check if its loggable.
    fun loggable(): Boolean {
        return logChanges
    }
    // Custom Files Methods Start
    /**
     * Register a folder that has custom files in it. Make sure to have a "/" in front of the folder name.
     * @param homeFolder The folder that has custom files in it.
     */
    fun registerCustomFolder(homeFolder: String): FileManager {
        homeFolders.add(homeFolder)
        return this
    }

    /**
     * Unregister a folder that has custom files in it. Make sure to have a "/" in front of the folder name.
     * @param homeFolder The folder with custom files in it.
     */
    fun unregisterCustomFilesFolder(homeFolder: String): FileManager {
        homeFolders.remove(homeFolder)
        return this
    }

    /**
     * Register a file that needs to be generated when it's home folder doesn't exist. Make sure to have a "/" in front of the home folder's name.
     * @param fileName The name of the file you want to auto-generate when the folder doesn't exist.
     * @param homeFolder The folder that has custom files in it.
     */
    fun registerDefaultGenerateFiles(fileName: String, homeFolder: String): FileManager {
        autoGeneratedFiles[fileName] = homeFolder
        return this
    }

    /**
     * Register a file that needs to be generated when it's home folder doesn't exist. Make sure to have a "/" in front of the home folder's name.
     * @param fileName The name of the file you want to auto-generate when the folder doesn't exist.
     * @param homeFolder The folder that has custom files in it.
     * @param jarHomeFolder The folder that the file is found in the jar.
     */
    fun registerDefaultGenerateFiles(fileName: String, homeFolder: String, jarHomeFolder: String?): FileManager {
        autoGeneratedFiles[fileName] = homeFolder
        jarHomeFolders[fileName] = jarHomeFolder
        return this
    }

    /**
     * Unregister a file that doesn't need to be generated when it's home folder doesn't exist. Make sure to have a "/" in front of the home folder's name.
     * @param fileName The file that you want to remove from auto-generating.
     */
    fun removeDefaultGenerateFiles(fileName: String): FileManager {
        autoGeneratedFiles.remove(fileName)
        jarHomeFolders.remove(fileName)
        return this
    }

    /**
     * Get a custom file from the loaded custom files instead of a hardcoded one.
     * This allows you to get custom files like Per player data files.
     * @param name Name of the crate you want. (Without the .yml)
     * @return The custom file you wanted otherwise if not found will return null.
     */
    fun getCustomFile(name: String?): CustomFile? {
        for (file in customFiles) {
            if (file.name.equals(name, ignoreCase = true)) {
                return file
            }
        }
        return null
    }

    /**
     * Save a custom file.
     * @param name The name of the custom file.
     */
    fun saveCustomFile(name: String?) {
        val file = getCustomFile(name)
        if (file != null) {
            try {
                file.getFile().save(File(plugin.getDataFolder(), file.homeFolder + "/" + file.fileName))
                if (logChanges) plugin.getLogger().info("Successfully saved the " + file.fileName + ".")
            } catch (e: Exception) {
                plugin.getLogger().warning("Could not save " + file.fileName + "!")
                for (stack in e.stackTrace) {
                    plugin.getLogger().severe(stack.toString())
                }
            }
            return
        }
        if (logChanges) plugin.getLogger().warning("The file $name.yml could not be found!")
    }

    /**
     * Overrides the loaded state file and loads the file systems file.
     */
    fun reloadCustomFile(name: String) {
        val file = getCustomFile(name)
        if (file != null) {
            try {
                file.file = YamlConfiguration.loadConfiguration(
                    File(
                        plugin.getDataFolder(),
                        "/" + file.homeFolder + "/" + file.fileName
                    )
                )
                if (logChanges) plugin.getLogger().info("Successfully reloaded the " + file.fileName + ".")
            } catch (e: Exception) {
                plugin.getLogger().warning("Could not save " + file.fileName + "!")
                for (stack in e.stackTrace) {
                    plugin.getLogger().severe(stack.toString())
                }
            }
            return
        }
        if (logChanges) plugin.getLogger().warning("The file $name.yml could not be found!")
    }

    fun update(fileName: String?) {
        val jarFile: InputStreamReader
        jarFile = try {
            InputStreamReader(
                Objects.requireNonNull<URL>(plugin.javaClass.getResource("/locale/" + "locale-de.yml")).openConnection()
                    .getInputStream()
            )
        } catch (e: Exception) {
            plugin.getLogger().severe(e.message)
            for (stack in e.stackTrace) {
                plugin.getLogger().severe(stack.toString())
            }
            return
        }
        addMissingOptions(fileName, YamlConfiguration.loadConfiguration(jarFile))
        saveCustomFile(fileName)
    }

    fun addMissingOptions(fileName: String?, internalConfig: YamlConfiguration) {
        val fileConfiguration: FileConfiguration? = fileConfigurations[fileName]
        for (string in internalConfig.getKeys(true)) {
            if (!fileConfiguration.contains(string)) {
                fileConfiguration.set(string, internalConfig[string!!])
            }
        }
    }

    // Custom Files Methods End
    // Adds a single file to the hash maps.
    fun addConfiguration(fileName: String, file: File?, fileConfiguration: FileConfiguration) {
        fileConfigurations[fileName] = fileConfiguration
        files[fileName] = file
        if (logChanges) plugin.getLogger().warning("Loading $fileName...")
    }

    // Saves the new file contents after doing something like getFile("config.yml").set("").
    fun saveFile(fileName: String) {
        try {
            fileConfigurations[fileName].save(files[fileName])
            if (logChanges) plugin.getLogger().warning("Saving $fileName...")
        } catch (e: Exception) {
            plugin.getLogger().warning("Could not save $fileName!")
            for (stack in e.stackTrace) {
                plugin.getLogger().severe(stack.toString())
            }
        }
    }

    // Reloads the file, obviously.
    fun reloadFile(fileName: String, fileConfiguration: FileConfiguration) {
        fileConfigurations[fileName] = fileConfiguration
        if (logChanges) plugin.getLogger().warning("Reloading $fileName...")
    }

    fun removeFile(fileName: String) {
        fileConfigurations.remove(fileName)
        files.remove(fileName)
        if (logChanges) plugin.getLogger().warning("$fileName has been removed...")
    }

    // Gets the file for things like reloading.
    fun getFile(file: File?): File? {
        return files[file!!.name]
    }

    // Gets the file if you need to get a value.
    fun getFile(fileName: String?): FileConfiguration? {
        return fileConfigurations[fileName]
    }
}
 */